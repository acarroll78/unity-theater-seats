// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct Reservation : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static Reservation GetRootAsReservation(ByteBuffer _bb) { return GetRootAsReservation(_bb, new Reservation()); }
  public static Reservation GetRootAsReservation(ByteBuffer _bb, Reservation obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Reservation __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public uint UserId { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  public uint ShowId { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  public uint SeatId { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }

  public static Offset<Reservation> CreateReservation(FlatBufferBuilder builder,
      uint userId = 0,
      uint showId = 0,
      uint seatId = 0) {
    builder.StartTable(3);
    Reservation.AddSeatId(builder, seatId);
    Reservation.AddShowId(builder, showId);
    Reservation.AddUserId(builder, userId);
    return Reservation.EndReservation(builder);
  }

  public static void StartReservation(FlatBufferBuilder builder) { builder.StartTable(3); }
  public static void AddUserId(FlatBufferBuilder builder, uint userId) { builder.AddUint(0, userId, 0); }
  public static void AddShowId(FlatBufferBuilder builder, uint showId) { builder.AddUint(1, showId, 0); }
  public static void AddSeatId(FlatBufferBuilder builder, uint seatId) { builder.AddUint(2, seatId, 0); }
  public static Offset<Reservation> EndReservation(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Reservation>(o);
  }
};

